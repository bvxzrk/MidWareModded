--[[
    Mid-Journey
    SJAD Â© 2025
    Authors: SJAD, flexOwner3RD
]]
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "MidWare Modded by flexOwner",
    LoadingTitle = "Evade v2 Rewritten",
    LoadingSubtitle = "SJAD, flexOwner3RD",
    Theme = "Light",
    ShowText = "MidWare Modded",
    Icon = 105495960707973,
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "SJAD_Evade",
        FileName = "EvadeConfig"
    },
    Discord = {
        Enabled = true,
        Invite = "6UaRDjBY42",
        RememberJoins = true
    },
    KeySystem = true,
    KeySettings = {
        Title = "SJAD Keysystem",
        Subtitle = "Key: FreeMidWare",
        Note = "Script is a free!!",
        FileName = "SJAD",
        SaveKey = true,
        GrabKeyFromSite = false,
        Key = {"FreeMidWare"}
    }
})

-- Variables
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Lighting = game:GetService("Lighting")
local UserInputService = game:GetService("UserInputService")

local Confirmed = false
local autoRespawnMethod = nil
local respawnConnection
local lastSavedPosition
local playerESPThread
local ticketESPThread
local nextbotESPThread
local tracerThread
local tracerLines = {}
local infiniteSlideEnabled = false
local slideFrictionValue = -8
local autoCarryButton
local autoCarryConnection
local autoHelpConnection
local slideConnection

-- Gradient Helper
local function gradient(text, startColor, endColor)
    local result = ""
    local length = #text
    for i = 1, length do
        local t = (i - 1) / math.max(length - 1, 1)
        local r = math.floor((startColor.R + (endColor.R - startColor.R) * t) * 255)
        local g = math.floor((startColor.G + (endColor.G - startColor.G) * t) * 255)
        local b = math.floor((startColor.B + (endColor.B - startColor.B) * t) * 255)
        result = result .. "<font color=\"rgb(" .. r .. ", " .. g .. ", " .. b .. ")\">" .. text:sub(i, i) .. "</font>"
    end
    return result
end

-- Tabs
local MainTab = Window:CreateTab("Main")
local VisualsTab = Window:CreateTab("Visuals")
local MiscTab = Window:CreateTab("Misc")
local InfoTab = Window:CreateTab("Info")

-- Info Tab Content
InfoTab:CreateLabel("Mid-Journey Hub for Evade | Modded")
InfoTab:CreateLabel("Authors: SJAD, flexOwner3RD")
InfoTab:CreateLabel("Version: 1.2.2Modded")
InfoTab:CreateLabel("Join our discord: discord.gg/6UaRDjBY42")
InfoTab:CreateLabel("This is a modded MidWare!")
InfoTab:CreateLabel("Good luck!!")

-- 1. Automatic Respawn
MainTab:CreateToggle({
    Name = "Automatic Respawn",
    CurrentValue = false,
    Flag = "AutoRespawn",
    Callback = function(state)
        getgenv().AutoRespawnEnabled = state
        if respawnConnection then
            respawnConnection:Disconnect()
            respawnConnection = nil
        end
        if state then
            task.defer(function()
                while not LocalPlayer.Character do task.wait() end
                respawnConnection = LocalPlayer.CharacterAdded:Connect(function(character)
                    task.defer(function()
                        local hrp = character:WaitForChild("HumanoidRootPart", 5)
                        local humanoid = character:WaitForChild("Humanoid", 5)
                        if not hrp or not humanoid then return end

                        character:GetAttributeChangedSignal("Downed"):Connect(function()
                            if not getgenv().AutoRespawnEnabled or character:GetAttribute("Downed") ~= true or autoRespawnMethod ~= "Fake Revive" then return end
                            if hrp then lastSavedPosition = hrp.Position end
                            task.wait(3)
                            local start = tick()
                            repeat
                                pcall(function()
                                    ReplicatedStorage:WaitForChild("Events", 9e9):WaitForChild("Player", 9e9):WaitForChild("ChangePlayerMode", 9e9):FireServer(true)
                                end)
                                task.wait(1)
                            until character:GetAttribute("Downed") ~= true or tick() - start > 1
                            local newChar
                            repeat
                                newChar = LocalPlayer.Character
                                task.wait()
                            until newChar and newChar:FindFirstChild("HumanoidRootPart")
                            local newHRP = newChar:FindFirstChild("HumanoidRootPart")
                            if lastSavedPosition and newHRP then
                                newHRP.CFrame = CFrame.new(lastSavedPosition)
                                task.wait(0.5)
                            end
                        end)
                    end)
                end)
                LocalPlayer.CharacterAdded:Fire(LocalPlayer.Character)
            end)
        end
    end
})

MainTab:CreateDropdown({
    Name = "Respawn Method",
    Options = {"Random", "Fake Revive"},
    CurrentOption = {"Fake Revive"},
    MultipleOptions = false,
    Flag = "RespawnMethod",
    Callback = function(value)
        autoRespawnMethod = value[1]
    end
})

-- 2. Game Timer Display
VisualsTab:CreateToggle({
    Name = "Game Timer Display",
    CurrentValue = false,
    Flag = "ShowGameTime",
    Callback = function(state)
        local screenGui = LocalPlayer:WaitForChild("PlayerGui"):FindFirstChild("LightningWareTimer")
        if screenGui then screenGui.Enabled = state end
    end
})

-- 3. ESP Player
VisualsTab:CreateToggle({
    Name = "ESP Player",
    CurrentValue = false,
    Flag = "EspPlayer",
    Callback = function(state)
        local function getDistance(pos)
            local char = LocalPlayer.Character
            local hrp = char and char:FindFirstChild("HumanoidRootPart")
            return hrp and (pos - hrp.Position).Magnitude or nil
        end

        local function createPlayerESP(part)
            local billboard = Instance.new("BillboardGui")
            billboard.Name = "PlayerESP"
            billboard.Adornee = part
            billboard.Size = UDim2.new(0, 180, 0, 25)
            billboard.StudsOffset = Vector3.new(0, 3.2, 0)
            billboard.AlwaysOnTop = true
            billboard.LightInfluence = 0
            billboard.Parent = part
            local label = Instance.new("TextLabel")
            label.Name = "Label"
            label.Size = UDim2.new(1, 0, 1, 0)
            label.BackgroundTransparency = 1
            label.TextStrokeTransparency = 0.25
            label.TextScaled = true
            label.RichText = true
            label.Font = Enum.Font.GothamSemibold
            label.Text = ""
            label.TextColor3 = Color3.fromRGB(100, 180, 255)
            label.Parent = billboard
            return label
        end

        local function removeAllESPs()
            local folder = workspace:FindFirstChild("Game") and workspace.Game:FindFirstChild("Players")
            if folder then
                for _, char in ipairs(folder:GetChildren()) do
                    if char:IsA("Model") then
                        local hrp = char:FindFirstChild("HumanoidRootPart")
                        if hrp then
                            local existing = hrp:FindFirstChild("PlayerESP")
                            if existing then existing:Destroy() end
                        end
                    end
                end
            end
        end

        if state then
            if playerESPThread then coroutine.close(playerESPThread) end
            playerESPThread = coroutine.create(function()
                while state do
                    local folder = workspace:FindFirstChild("Game") and workspace.Game:FindFirstChild("Players")
                    if folder then
                        for _, char in ipairs(folder:GetChildren()) do
                            if char:IsA("Model") and char:GetAttribute("Team") ~= "Nextbot" and char.Name ~= LocalPlayer.Name then
                                local hrp = char:FindFirstChild("HumanoidRootPart")
                                if hrp then
                                    local espGui = hrp:FindFirstChild("PlayerESP")
                                    local label = espGui and espGui:FindFirstChild("Label") or createPlayerESP(hrp)
                                    local dist = getDistance(hrp.Position) or 0
                                    local downed = char:GetAttribute("Downed")
                                    local downedTime = tonumber(char:GetAttribute("DownedTimeLeft")) or 0
                                    local name = char.Name
                                    local displayText, color
                                    if downed == true then
                                        color = Color3.fromRGB(255, 120, 120)
                                        displayText = string.format('%s <font size="16">(Downed %.0f)</font>', name, downedTime)
                                    else
                                        color = Color3.fromRGB(120, 255, 120)
                                        displayText = string.format('%s\n%.0f studs', name, dist)
                                    end
                                    if label.Text ~= displayText or label.TextColor3 ~= color then
                                        label.Text = displayText
                                        label.TextColor3 = color
                                    end
                                end
                            end
                        end
                    end
                    task.wait(0.5)
                end
            end)
            coroutine.resume(playerESPThread)
        else
            removeAllESPs()
            if playerESPThread then coroutine.close(playerESPThread) playerESPThread = nil end
        end
    end
})

-- 4. ESP Ticket
VisualsTab:CreateToggle({
    Name = "ESP Ticket",
    CurrentValue = false,
    Flag = "EspTicket",
    Callback = function(state)
        local function getDistance(pos)
            local char = LocalPlayer.Character
            local hrp = char and char:FindFirstChild("HumanoidRootPart")
            return hrp and (pos - hrp.Position).Magnitude or nil
        end

        local function createESP(part)
            local billboard = Instance.new("BillboardGui")
            billboard.Name = "TicketESP"
            billboard.Adornee = part
            billboard.Size = UDim2.new(0, 180, 0, 25)
            billboard.StudsOffset = Vector3.new(0, 3.2, 0)
            billboard.AlwaysOnTop = true
            billboard.LightInfluence = 0
            billboard.Parent = part
            local label = Instance.new("TextLabel")
            label.Name = "Ticket"
            label.Size = UDim2.new(1, 0, 1, 0)
            label.BackgroundTransparency = 1
            label.TextStrokeTransparency = 0.25
            label.TextScaled = true
            label.Font = Enum.Font.GothamSemibold
            label.TextColor3 = Color3.fromRGB(255, 255, 150)
            label.Text = "Ticket"
            label.Parent = billboard
            return billboard
        end

        local function removeAllTicketESP()
            local ticketFolder = workspace:FindFirstChild("Game") and workspace.Game:FindFirstChild("Effects") and workspace.Game.Effects:FindFirstChild("Tickets")
            if ticketFolder then
                for _, ticketModel in ipairs(ticketFolder:GetChildren()) do
                    if ticketModel:IsA("Model") then
                        local part = ticketModel:FindFirstChildWhichIsA("BasePart")
                        if part then
                            local existing = part:FindFirstChild("TicketESP")
                            if existing then existing:Destroy() end
                        end
                    end
                end
            end
        end

        if state then
            if ticketESPThread then coroutine.close(ticketESPThread) end
            ticketESPThread = coroutine.create(function()
                while state do
                    local ticketFolder = workspace:FindFirstChild("Game") and workspace.Game:FindFirstChild("Effects") and workspace.Game.Effects:FindFirstChild("Tickets")
                    if ticketFolder then
                        for _, ticketModel in ipairs(ticketFolder:GetChildren()) do
                            if ticketModel:IsA("Model") then
                                local part = ticketModel:FindFirstChildWhichIsA("BasePart")
                                if part then
                                    local billboard = part:FindFirstChild("TicketESP") or createESP(part)
                                    local label = billboard:FindFirstChild("Ticket")
                                    if label then
                                        local dist = getDistance(part.Position)
                                        label.Text = dist and string.format("%s\n%.0f studs", ticketModel.Name, dist) or ticketModel.Name
                                    end
                                end
                            end
                        end
                    end
                    task.wait(0.5)
                end
            end)
            coroutine.resume(ticketESPThread)
        else
            removeAllTicketESP()
            if ticketESPThread then coroutine.close(ticketESPThread) ticketESPThread = nil end
        end
    end
})

-- 5. ESP Nextbot
VisualsTab:CreateToggle({
    Name = "ESP Nextbot",
    CurrentValue = false,
    Flag = "EspNextbot",
    Callback = function(state)
        local function getDistance(pos)
            local char = LocalPlayer.Character
            local hrp = char and char:FindFirstChild("HumanoidRootPart")
            return hrp and (pos - hrp.Position).Magnitude or nil
        end

        local function getESPPart(obj)
            if obj:IsA("BasePart") then return obj
            elseif obj:IsA("Model") then
                return obj:FindFirstChild("Root") or obj:FindFirstChild("Head") or obj:FindFirstChild("HumanoidRootPart") or obj:FindFirstChildWhichIsA("BasePart")
            end
        end

        local function getColorByDistance(dist)
            if dist <= 12 then return Color3.fromRGB(50, 50, 50)
            elseif dist <= 60 then
                local t = (dist - 12) / 48
                return Color3.fromRGB(255, 120 + (255 - 120) * t, 120)
            else return Color3.fromRGB(200, 150, 255)
            end
        end

        local function createESP(part)
            local billboard = Instance.new("BillboardGui")
            billboard.Name = "NextbotESP"
            billboard.Adornee = part
            billboard.Size = UDim2.new(0, 180, 0, 25)
            billboard.StudsOffset = Vector3.new(0, 3.2, 0)
            billboard.AlwaysOnTop = true
            billboard.LightInfluence = 0
            billboard.Parent = part
            local label = Instance.new("TextLabel")
            label.Name = "Label"
            label.Size = UDim2.new(1, 0, 1, 0)
            label.BackgroundTransparency = 1
            label.TextStrokeTransparency = 0.25
            label.TextScaled = true
            label.Font = Enum.Font.GothamSemibold
            label.Text = ""
            label.TextColor3 = Color3.fromRGB(255, 255, 255)
            label.Parent = billboard
            return billboard
        end

        local function removeAllNextbotESP()
            local folder = workspace:FindFirstChild("Game") and workspace.Game:FindFirstChild("Players")
            if folder then
                for _, npc in ipairs(folder:GetChildren()) do
                    local part = getESPPart(npc)
                    if part then
                        local existing = part:FindFirstChild("NextbotESP")
                        if existing then existing:Destroy() end
                    end
                end
            end
        end

        if state then
            if nextbotESPThread then coroutine.close(nextbotESPThread) end
            nextbotESPThread = coroutine.create(function()
                while state do
                    local folder = workspace:FindFirstChild("Game") and workspace.Game:FindFirstChild("Players")
                    if folder then
                        for _, npc in ipairs(folder:GetChildren()) do
                            if npc:GetAttribute("Team") == "Nextbot" then
                                local part = getESPPart(npc)
                                if part then
                                    local billboard = part:FindFirstChild("NextbotESP") or createESP(part)
                                    local label = billboard:FindFirstChild("Label")
                                    if label then
                                        local dist = getDistance(part.Position)
                                        label.Text = dist and string.format("%s\n%.0f studs", npc.Name, dist) or npc.Name
                                        label.TextColor3 = dist and getColorByDistance(dist) or Color3.fromRGB(255, 255, 255)
                                    end
                                end
                            end
                        end
                    end
                    task.wait(0.5)
                end
            end)
            coroutine.resume(nextbotESPThread)
        else
            removeAllNextbotESP()
            if nextbotESPThread then coroutine.close(nextbotESPThread) nextbotESPThread = nil end
        end
    end
})

-- 6. Tracer Downed Players
VisualsTab:CreateToggle({
    Name = "Tracer Downed Players",
    CurrentValue = false,
    Flag = "TracerDowned",
    Callback = function(state)
        local Camera = workspace.CurrentCamera
        local function cleanup()
            for _, line in ipairs(tracerLines) do
                if line then line:Remove() end
            end
            tracerLines = {}
        end

        if state then
            if tracerThread then coroutine.close(tracerThread) end
            tracerThread = coroutine.create(function()
                while state do
                    cleanup()
                    local folder = workspace:FindFirstChild("Game") and workspace.Game:FindFirstChild("Players")
                    if folder then
                        for _, char in ipairs(folder:GetChildren()) do
                            if char:IsA("Model") and char:GetAttribute("Team") ~= "Nextbot" and char.Name ~= LocalPlayer.Name and char:GetAttribute("Downed") == true then
                                local hrp = char:FindFirstChild("HumanoidRootPart")
                                if hrp and Camera then
                                    local pos, onScreen = Camera:WorldToViewportPoint(hrp.Position)
                                    if onScreen then
                                        local tracer = Drawing.new("Line")
                                        tracer.Color = Color3.fromRGB(255, 120, 120)
                                        tracer.Thickness = 2
                                        tracer.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
                                        tracer.To = Vector2.new(pos.X, pos.Y)
                                        tracer.ZIndex = 1
                                        tracer.Visible = true
                                        table.insert(tracerLines, tracer)
                                    end
                                end
                            end
                        end
                    end
                    task.wait(0.05)
                end
            end)
            coroutine.resume(tracerThread)
        else
            if tracerThread then coroutine.close(tracerThread) tracerThread = nil end
            cleanup()
        end
    end
})

-- 7. Fullbright
local originalLighting = {
    Brightness = Lighting.Brightness,
    GlobalShadows = Lighting.GlobalShadows,
    FogEnd = Lighting.FogEnd,
    Ambient = Lighting.Ambient,
    OutdoorAmbient = Lighting.OutdoorAmbient,
    ClockTime = Lighting.ClockTime
}

VisualsTab:CreateToggle({
    Name = "Fullbright",
    CurrentValue = false,
    Flag = "FullbrightToggle",
    Callback = function(state)
        if state then
            Lighting.Brightness = 2
            Lighting.GlobalShadows = false
            Lighting.FogEnd = 999999
            Lighting.Ambient = Color3.fromRGB(255, 255, 255)
            Lighting.OutdoorAmbient = Color3.fromRGB(255, 255, 255)
            Lighting.ClockTime = 14
        else
            Lighting.Brightness = originalLighting.Brightness
            Lighting.GlobalShadows = originalLighting.GlobalShadows
            Lighting.FogEnd = originalLighting.FogEnd
            Lighting.Ambient = originalLighting.Ambient
            Lighting.OutdoorAmbient = originalLighting.OutdoorAmbient
            Lighting.ClockTime = originalLighting.ClockTime
        end
    end
})

-- 8. Speed / JumpCap / Strafe Sliders
local currentSettings = { Speed = 1500, JumpCap = 1, AirStrafeAcceleration = 187 }
local requiredFields = {
    Friction=true, AirStrafeAcceleration=true, JumpHeight=true, RunDeaccel=true,
    JumpSpeedMultiplier=true, JumpCap=true, SprintCap=true, WalkSpeedMultiplier=true,
    BhopEnabled=true, Speed=true, AirAcceleration=true, RunAccel=true, SprintAcceleration=true
}
local appliedOnce = false
getgenv().ApplyMode = "Not Optimized"

local function getMatchingTables()
    local matched = {}
    for _, obj in pairs(getgc(true)) do
        if typeof(obj) == "table" then
            local ok = true
            for field in pairs(requiredFields) do
                if rawget(obj, field) == nil then ok = false break end
            end
            if ok then table.insert(matched, obj) end
        end
    end
    return matched
end

local function applyToTables(callback)
    for _, tableObj in ipairs(getMatchingTables()) do
        pcall(callback, tableObj)
    end
end

MainTab:CreateSlider({
    Name = "Set Speed",
    Range = {1500, 10000},
    Increment = 1,
    Suffix = "",
    CurrentValue = 1500,
    Flag = "SpeedSlider",
    Callback = function(val)
        currentSettings.Speed = val
        applyToTables(function(obj) obj.Speed = val end)
    end
})

MainTab:CreateSlider({
    Name = "Set Jump Cap",
    Range = {0.1, 5000},
    Increment = 0.1,
    Suffix = "",
    CurrentValue = 1,
    Flag = "JumpCapSlider",
    Callback = function(val)
        currentSettings.JumpCap = val
        applyToTables(function(obj) obj.JumpCap = val end)
    end
})

MainTab:CreateSlider({
    Name = "Strafe Acceleration",
    Range = {1, 1000000},
    Increment = 1,
    Suffix = "",
    CurrentValue = 187,
    Flag = "StrafeSlider",
    Callback = function(val)
        currentSettings.AirStrafeAcceleration = val
        applyToTables(function(obj) obj.AirStrafeAcceleration = val end)
    end
})

MainTab:CreateDropdown({
    Name = "Apply Method",
    Options = {"Not Optimized", "Optimized"},
    CurrentOption = {"Not Optimized"},
    MultipleOptions = false,
    Flag = "ApplyModeDropdown",
    Callback = function(opt)
        getgenv().ApplyMode = opt[1]
    end
})

-- 9. Infinite Slide
MainTab:CreateToggle({
    Name = "Infinite Slide",
    CurrentValue = false,
    Flag = "InfiniteSlideToggle",
    Callback = function(state)
        infiniteSlideEnabled = state
        local cachedTables = {}
        local plrModel
        local keys = {
            "Friction", "AirStrafeAcceleration", "JumpHeight", "RunDeaccel",
            "JumpSpeedMultiplier", "JumpCap", "SprintCap", "WalkSpeedMultiplier",
            "BhopEnabled", "Speed", "AirAcceleration", "RunAccel", "SprintAcceleration"
        }

        local function hasAll(tbl)
            if type(tbl) ~= "table" then return false end
            for _, k in ipairs(keys) do if rawget(tbl, k) == nil then return false end end
            return true
        end

        local function setFriction(value)
            for _, t in ipairs(cachedTables) do
                pcall(function() t.Friction = value end)
            end
        end

        local function updatePlayerModel()
            local GameFolder = workspace:FindFirstChild("Game")
            plrModel = GameFolder and GameFolder:FindFirstChild("Players") and GameFolder.Players:FindFirstChild(LocalPlayer.Name)
        end

        local function onHeartbeat()
            if not infiniteSlideEnabled then return end
            if not plrModel then setFriction(5) return end
            local success, currentState = pcall(function() return plrModel:GetAttribute("State") end)
            if success and currentState == "Slide" then
                pcall(function() plrModel:SetAttribute("State", "EmotingSlide") end)
                setFriction(slideFrictionValue)
            elseif success and currentState == "EmotingSlide" then
                setFriction(slideFrictionValue)
            else
                setFriction(5)
            end
        end

        if state then
            for _, obj in ipairs(getgc(true)) do
                if hasAll(obj) then table.insert(cachedTables, obj) end
            end
            updatePlayerModel()
            if slideConnection then slideConnection:Disconnect() end
            slideConnection = RunService.Heartbeat:Connect(onHeartbeat)
            LocalPlayer.CharacterAdded:Connect(function()
                task.wait(0.1)
                updatePlayerModel()
            end)
        else
            if slideConnection then slideConnection:Disconnect() slideConnection = nil end
            setFriction(5)
            cachedTables = {}
            plrModel = nil
        end
    end
})

MainTab:CreateSlider({
    Name = "Infinite Slide Speed",
    Range = {-500, -1},
    Increment = 1,
    Suffix = "",
    CurrentValue = -8,
    Flag = "SlideSpeedSlider",
    Callback = function(val)
        slideFrictionValue = val
    end
})

-- 10. Bunny Hop
getgenv().autoJumpEnabled = false
getgenv().bhopMode = "Acceleration"
getgenv().bhopAccelValue = -0.1

MainTab:CreateToggle({
    Name = "Bunny Hop",
    CurrentValue = false,
    Flag = "BhopToggle",
    Callback = function(state)
        getgenv().autoJumpEnabled = state
    end
})

MainTab:CreateDropdown({
    Name = "Bunny Hop Mode",
    Options = {"Acceleration", "No Acceleration"},
    CurrentOption = {"Acceleration"},
    MultipleOptions = false,
    Flag = "BhopModeDropdown",
    Callback = function(opt)
        getgenv().bhopMode = opt[1]
    end
})

MainTab:CreateSlider({
    Name = "Bunny Hop Acceleration",
    Range = {-5, -0.01},
    Increment = 0.01,
    Suffix = "",
    CurrentValue = -0.1,
    Flag = "BhopAccelSlider",
    Callback = function(val)
        getgenv().bhopAccelValue = val
    end
})

-- 11. Auto Carry
getgenv().autoCarryEnabled = false

local function createAutoCarryButton()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "AutoCarryGui"
    screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")
    screenGui.ResetOnSpawn = false
    screenGui.IgnoreGuiInset = true

    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 120, 0, 40)
    frame.Position = UDim2.new(0.5, -60, 0.8, -20)
    frame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    frame.BorderSizePixel = 0
    frame.Parent = screenGui

    local textButton = Instance.new("TextButton")
    textButton.Size = UDim2.new(1, 0, 1, 0)
    textButton.BackgroundTransparency = 1
    textButton.Text = "Auto Carry: OFF"
    textButton.TextColor3 = Color3.fromRGB(255, 120, 120)
    textButton.TextScaled = true
    textButton.Font = Enum.Font.GothamBold
    textButton.Parent = frame

    local uic = Instance.new("UICorner")
    uic.CornerRadius = UDim.new(0, 8)
    uic.Parent = frame

    local dragging, dragInput, dragStart, startPos
    local function updateInput(input)
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then dragging = false end
            end)
        end
    end)

    frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then updateInput(input) end
    end)

    textButton.MouseButton1Click:Connect(function()
        getgenv().autoCarryEnabled = not getgenv().autoCarryEnabled
        textButton.Text = "Auto Carry: " .. (getgenv().autoCarryEnabled and "ON" or "OFF")
        textButton.TextColor3 = getgenv().autoCarryEnabled and Color3.fromRGB(120, 255, 120) or Color3.fromRGB(255, 120, 120)
        Rayfield:UpdateToggle("AutoCarry", {CurrentValue = getgenv().autoCarryEnabled})
    end)

    return screenGui
end

MainTab:CreateToggle({
    Name = "Auto Carry",
    CurrentValue = false,
    Flag = "AutoCarry",
    Callback = function(state)
        getgenv().autoCarryEnabled = state
        if state then
            if not autoCarryButton then autoCarryButton = createAutoCarryButton() end
            autoCarryButton.Enabled = true
            local button = autoCarryButton.Frame.TextButton
            button.Text = "Auto Carry: ON"
            button.TextColor3 = Color3.fromRGB(120, 255, 120)
            if autoCarryConnection then autoCarryConnection:Disconnect() end
            autoCarryConnection = RunService.Heartbeat:Connect(function()
                if not getgenv().autoCarryEnabled then return end
                local char = LocalPlayer.Character
                local hrp = char and char:FindFirstChild("HumanoidRootPart")
                if not hrp then return end
                for _, other in ipairs(Players:GetPlayers()) do
                    if other ~= LocalPlayer and other.Character and other.Character:FindFirstChild("HumanoidRootPart") then
                        local dist = (hrp.Position - other.Character.HumanoidRootPart.Position).Magnitude
                        if dist <= 20 then
                            pcall(function()
                                ReplicatedStorage:WaitForChild("Events"):WaitForChild("Character"):WaitForChild("Interact"):FireServer("Carry", nil, other.Name)
                            end)
                            task.wait(0.2) -- Throttle to prevent spam
                        end
                    end
                end
            end)
        else
            if autoCarryButton then autoCarryButton.Enabled = false end
            if autoCarryButton and autoCarryButton.Frame and autoCarryButton.Frame.TextButton then
                autoCarryButton.Frame.TextButton.Text = "Auto Carry: OFF"
                autoCarryButton.Frame.TextButton.TextColor3 = Color3.fromRGB(255, 120, 120)
            end
            if autoCarryConnection then autoCarryConnection:Disconnect() autoCarryConnection = nil end
        end
    end
})

-- 12. Auto Help
getgenv().autoHelpEnabled = false

MainTab:CreateToggle({
    Name = "Auto Help",
    CurrentValue = false,
    Flag = "AutoHelp",
    Callback = function(state)
        getgenv().autoHelpEnabled = state
        if autoHelpConnection then autoHelpConnection:Disconnect() end
        if state then
            autoHelpConnection = RunService.Heartbeat:Connect(function()
                if not getgenv().autoHelpEnabled then return end
                local char = LocalPlayer.Character
                local hrp = char and char:FindFirstChild("HumanoidRootPart")
                if not hrp then return end
                for _, other in ipairs(Players:GetPlayers()) do
                    if other ~= LocalPlayer and other.Character and other.Character:FindFirstChild("HumanoidRootPart") then
                        local dist = (hrp.Position - other.Character.HumanoidRootPart.Position).Magnitude
                        local downed = other.Character:GetAttribute("Downed")
                        if dist <= 20 and downed == true then
                            pcall(function()
                                ReplicatedStorage:WaitForChild("Events"):WaitForChild("Revive"):FireServer(other.Character, "Revive")
                            end)
                            task.wait(1) -- Cooldown to prevent spam
                        end
                    end
                end
            end)
        end
    end
})

-- 13. Emote
getgenv().SelectedEmote = nil
getgenv().EmoteEnabled = false

local emoteList = {}
local success, emotesFolder = pcall(function() return ReplicatedStorage.Items.Emotes end)
if success and typeof(emotesFolder) == "Instance" then
    for _, emote in ipairs(emotesFolder:GetChildren()) do
        if emote:IsA("ModuleScript") or emote:IsA("LocalScript") or emote:IsA("Script") then
            table.insert(emoteList, emote.Name)
        end
    end
    table.sort(emoteList)
end

MainTab:CreateDropdown({
    Name = "Select Emote",
    Options = emoteList,
    CurrentOption = {},
    MultipleOptions = false,
    Flag = "EmoteSelect",
    Callback = function(opt)
        getgenv().SelectedEmote = opt[1]
    end
})

MainTab:CreateToggle({
    Name = "Enable Emote (Hold Crouch)",
    CurrentValue = false,
    Flag = "EmoteEnable",
    Callback = function(state)
        getgenv().EmoteEnabled = state
    end
})

-- 14. Lag Switch
getgenv().lagSwitchEnabled = false
getgenv().lagDuration = 0.5

MiscTab:CreateToggle({
    Name = "Lag Switch",
    CurrentValue = false,
    Flag = "LagSwitchToggle",
    Callback = function(state)
        getgenv().lagSwitchEnabled = state
    end
})

MiscTab:CreateSlider({
    Name = "Lag Duration",
    Range = {0.1, 10},
    Increment = 0.1,
    Suffix = "s",
    CurrentValue = 0.5,
    Flag = "LagDurationSlider",
    Callback = function(val)
        getgenv().lagDuration = val
    end
})

-- Credit Label
MiscTab:CreateLabel("Mid-Journey â SJAD, flexOwner3RD Â© 2025")

-- Background Loops
task.spawn(function()
    while true do
        local friction = 5
        if getgenv().autoJumpEnabled and getgenv().bhopMode == "Acceleration" then
            friction = getgenv().bhopAccelValue or -0.1
        end
        if not getgenv().autoJumpEnabled and not infiniteSlideEnabled then friction = 5 end
        for _, t in pairs(getgc(true)) do
            if type(t) == "table" and rawget(t, "Friction") and getgenv().bhopMode ~= "No Acceleration" then
                t.Friction = friction
            end
        end
        task.wait(0.15)
    end
end)

task.spawn(function()
    while true do
        if getgenv().autoJumpEnabled then
            local character = LocalPlayer.Character
            local humanoid = character and character:FindFirstChild("Humanoid")
            if humanoid and humanoid:GetState() ~= Enum.HumanoidStateType.Jumping and humanoid:GetState() ~= Enum.HumanoidStateType.Freefall then
                humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
            end
            task.wait(getgenv().bhopMode == "No Acceleration" and 0.05 or 0)
        else
            task.wait(0.1)
        end
    end
end)

task.spawn(function()
    local guiPath = { "PlayerGui", "Shared", "HUD", "Mobile", "Right", "Mobile", "CrouchButton" }
    local function waitForDescendant(parent, name)
        local found = parent:FindFirstChild(name, true)
        while not found do
            parent.DescendantAdded:Wait()
            found = parent:FindFirstChild(name, true)
        end
        return found
    end

    local function connectCrouchButton()
        local gui = LocalPlayer:WaitForChild(guiPath[1])
        for i = 2, #guiPath do
            gui = waitForDescendant(gui, guiPath[i])
        end
        local button = gui
        local holding = false
        button.MouseButton1Down:Connect(function()
            holding = true
            task.delay(0.5, function()
                if holding and getgenv().EmoteEnabled and getgenv().SelectedEmote then
                    pcall(function()
                        ReplicatedStorage:WaitForChild("Events", 9e9):WaitForChild("Character", 9e9):WaitForChild("Emote", 9e9):FireServer(getgenv().SelectedEmote)
                    end)
                end
            end)
        end)
        button.MouseButton1Up:Connect(function()
            holding = false
        end)
    end
    while true do
        pcall(connectCrouchButton)
        task.wait(1)
    end
end)

-- Cleanup on Script End
game:BindToClose(function()
    if respawnConnection then respawnConnection:Disconnect() end
    if playerESPThread then coroutine.close(playerESPThread) end
    if ticketESPThread then coroutine.close(ticketESPThread) end
    if nextbotESPThread then coroutine.close(nextbotESPThread) end
    if tracerThread then coroutine.close(tracerThread) end
    if autoCarryConnection then autoCarryConnection:Disconnect() end
    if autoHelpConnection then autoHelpConnection:Disconnect() end
    if slideConnection then slideConnection:Disconnect() end
    if autoCarryButton then autoCarryButton:Destroy() end
    for _, line in ipairs(tracerLines) do
        if line then line:Remove() end
    end
end)
